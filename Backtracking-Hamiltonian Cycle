//Hamiltonian Path in an undirected graph is a path that visits each vertex exactly once.
//A value graph[i][j] is 1 if there is a direct edge from i to j, otherwise graph[i][j] is 0.
#include<stdio.h>
#include<stdbool.h>
#define V 5

bool isSafe(int v,bool graph[v][v],int path[],int pos)
{
    if(graph[path[pos-1]][v]==0)
    return false;

    for(int i=0;i<pos;i++)
    if(path[i]==v)
    return false;

    return true;
}

bool hamCycleUtil(bool graph[V][V],int path[],int pos)
{
    if(pos==V)//base case: If all vertices are included in Hamiltonian Cycle 
    {
        if(graph[path[pos-1]][path[0]]==1)//And if there is an edge from the last included vertex to the first vertex
        return true;
        else 
        return false;
    }
    for(int v=1;v<V;v++)

    {
        if(isSafe(v,graph,path,pos))
        {
            path[pos]=v;
            if(hamCycleUtil(graph,path,path+1)==true)
            return true;

            path[pos]=-1;// If adding vertex v doesn't lead to a solution, then remove it

        }
    }
    return false;//If no vertex can be added to Hamiltonian Cycle constructed so far, then return false 
}

bool hamCycle(bool graph[V][V])
{
    int path[V];
    for(int i=0;i<V;i++)
    path[i]=-1;

    path[0]=0;
    if(hamCycleUtil(graph,path,1)==false)
    {
        printf("\nSolution does not exist");
        return false;
    } 
    printSol(path);
    return true;
}


void printSol(int path[])
{
    for(int i=0;i<V;i++)
    {
        printf("%d ",path[i]);
    }
    printf("%d ",path[0]);
    printf("\n");
    
}
int main()
{
    bool graph1[V][V] = {{0, 1, 0, 1, 0},
                      {1, 0, 1, 1, 1},
                      {0, 1, 0, 0, 1},
                      {1, 1, 0, 0, 1},
                      {0, 1, 1, 1, 0},
                     };
    hamCycle(graph1);
    bool graph2[V][V] = {{0, 1, 0, 1, 0},
                      {1, 0, 1, 1, 1},
                      {0, 1, 0, 0, 1},
                      {1, 1, 0, 0, 0},
                      {0, 1, 1, 0, 0},
                     };
    hamCycle(graph2);
    return 0;
}

